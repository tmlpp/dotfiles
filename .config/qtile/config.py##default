from libqtile import bar, layout, qtile, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen, ScratchPad, DropDown
from libqtile.lazy import lazy
import os
import subprocess

mod = "mod4"
terminal = 'kitty'

# Use the prompt to get a name for new group in treetab layout
@lazy.layout.function
def add_treetab_section(layout):
    prompt = qtile.widgets_map["prompt"]
    prompt.start_input("Section name: ", layout.cmd_add_section)

keys = [
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),

    Key([mod, "shift"], "h",
        lazy.layout.shuffle_left(),
        lazy.layout.move_left().when(layout=["treetab"]),
        desc="Move window to the left/move tab left in treetab"),
    Key([mod, "shift"], "l",
        lazy.layout.shuffle_right(),
        lazy.layout.move_right().when(layout=["treetab"]),
        desc="Move window to the right/move tab right in treetab"),
    Key([mod, "shift"], "j",
        lazy.layout.shuffle_down(),
        lazy.layout.move_down().when(layout=["treetab"]),
        desc="Move window to the right/move tab right in treetab"),
    Key([mod, "shift"], "k",
        lazy.layout.shuffle_up(),
        lazy.layout.move_up().when(layout=["treetab"]),
        desc="Move window to the right/move tab right in treetab"),

    Key([mod, "control"], "j",
        lazy.layout.grow(), # Monad
        lazy.layout.grow_down(),
        lazy.layout.section_down().when(layout=["treetab"]),
        lazy.layout.decrease_nmaster(),
        desc="Move window to the right/move tab right in treetab"),
    Key([mod, "control"], "k",
        lazy.layout.shrink(), # Monad
        lazy.layout.grow_up(),
        lazy.layout.section_up().when(layout=["treetab"]),
        lazy.layout.increase_nmaster(),
        desc="Move window to the right/move tab right in treetab"),
    Key([mod, "control"], "h",
        lazy.layout.shrink_main(), # Monad
        lazy.layout.grow_left(), # Column, BSP
        desc="Move window to the right/move tab right in treetab"),
    Key([mod, "control"], "l",
        lazy.layout.grow_main(), # Monad
        lazy.layout.grow_right(), # Column, BSP
        desc="Move window to the right/move tab right in treetab"),

    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
    Key([mod], "f", lazy.window.toggle_fullscreen(), desc="Toggle fullscreen on the focused window",),
    Key([mod], "bracketright", lazy.screen.next_group()),
    Key([mod], "bracketleft", lazy.screen.prev_group()),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "Tab", lazy.layout.next(), desc="Move window focus to other window"),
    Key([mod, 'shift'], "Tab", lazy.layout.previous(), desc="Move window focus to other window"),
    Key([mod], "space", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(), desc="Toggle between split and unsplit sides of stack",),
    Key([mod], "Menu", lazy.spawn("rofi -show run")),
    Key([mod], "g", lazy.next_screen()),
    Key([mod], "y", lazy.window.toggle_floating(), desc="Toggle floating on the focused window"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    Key([mod], "F8", lazy.spawn("keepassxc")),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    Key([mod, "shift"], "a", add_treetab_section, desc='Prompt to add new section in treetab'),
    Key([mod], 't', lazy.group['scratchpad'].dropdown_toggle('term')),

    # Volume and media
    Key([mod], "F1", lazy.spawn("volume-mute")),
    Key([mod], "F2", lazy.spawn("volume-down")),
    Key([mod], "F3", lazy.spawn("volume-up")),
    Key([mod], "F4", lazy.spawn("playerctl --player=spotify play-pause")),
    Key([mod], "F5", lazy.spawn("playerctl --player=spotify previous")),
    Key([mod], "F5", lazy.spawn("playerctl --player=spotify next")),

    # Screenshots
    Key([], "Print", lazy.spawn("flameshot screen")), # Fullscreen, save
    Key(["shift"], "Print", lazy.spawn("flameshot gui")), # Select area
    Key(["control"], "Print", lazy.spawn("flameshot screen --clipboard")), # Fullscreen, clipboard
    Key([mod], "Print", lazy.spawn("scrot -u '%Y-%m-%d_%H%M%S.png' -e 'mv $f ~/screenshots/'")), # Save active window

    Key([mod, "control"], "c", lazy.spawn("emacsclient -e '(make-capture-frame)'")),
]

groups = [
    Group(name='1',
          label='main',
          ),
    Group(name='2',
          label='dev',
          ),
    Group(name='3',
          label='media',
          ),
    Group(name='4',
          label='cgi',
          ),
    Group(name='5',
          label='msg',
          ),
    ScratchPad("scratchpad", [
        DropDown("term", terminal,
                 x=0.25, y=0.25,
                 width=0.5, height=0.5,
                 on_focus_lost_hide=True,
                 warp_pointer=False),
    ]),
]

for i in groups[:-1]:
    keys.extend([
            Key([mod], i.name, lazy.group[i.name].toscreen(), desc=f"Switch to group {i.label}"),
            Key([mod, "shift"], i.name, lazy.window.togroup(i.name, switch_group=False),
                desc=f"move focused window to group {i.label}"),
    ])

border = dict(
    border_focus='#cccccc',
    border_normal='#888888',
)

layout_defaults = dict(
    margin = 8,
    border_width = 2
)

layouts = [
    layout.Columns(
        name='COL',
        border_focus_stack=["#ff0000", "#ffff00"],
        **border,
        **layout_defaults,
    ),
    layout.Max(
        name='MAX',
    ),
    layout.TreeTab(),
    #     name='TAB',
    # ),
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

fg = '#eeee99'
bg = '#331133'

widget_defaults = dict(
    font="Ubuntu Mono",
    fontsize=14,
    foreground=fg,
    background=bg,
    padding=3,
)
extension_defaults = widget_defaults.copy()

bar_defaults = dict(
    border_width=[0, 0, 0, 0],
    border_color=[fg, "000000", fg, "000000"]
)

groupbox_defaults = dict(
    highlight_method = 'border',
    active = fg,
    borderwidth = 2,
    this_current_screen_border = fg,
    this_screen_border = '#aaaaaa',
)


screens = [
    Screen(
        bottom=bar.Bar(
            [
                widget.Clock(format="W%V | %a %d %b | %H:%M"),
                widget.GroupBox(
                    **groupbox_defaults,
                ),
                widget.DF(
                    partition='/',
                    visible_on_warn=False,
                    format='{p} {uf}{m}|{r:.0f}%'
                ),
                widget.DF(
                    partition='/home',
                    visible_on_warn=False,
                    format='{p} {uf}{m}|{r:.0f}%'
                ),
                widget.DF(
                    partition='/amanda',
                    visible_on_warn=False,
                ),
                widget.DF(
                    partition='/bella',
                    visible_on_warn=False,
                ),
                widget.DF(
                    partition='/cecilia',
                    visible_on_warn=False,
                ),
                widget.DF(
                    partition='/diana',
                    visible_on_warn=False,
                ),
                widget.DF(
                    partition='/ella',
                    visible_on_warn=False,
                ),
                widget.Spacer(length=bar.STRETCH),
            ],
            24,
            **bar_defaults
        )
    ),
    Screen(
        top=bar.Bar(
            [
                widget.CurrentLayout(),
                widget.GroupBox(
                    **groupbox_defaults,
                ),
                widget.Prompt(),
                widget.TaskList(
                    max_title_width = 150,
                    border = fg,
                ),
                # widget.WindowName(),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                # widget.StatusNotifier(),
                widget.Volume(),
                widget.Memory(),
                widget.Systray(),
                widget.Clock(format="W%V | %a %d %b | %H:%M"),
                # widget.QuickExit(),
            ],
            24,
            **bar_defaults
        ),
    ),
]

mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
        Match(wm_class='PureRef'),
        Match(title='Blender Preferences'),
        Match(title='capture'),
        Match(wm_class='qalculate-gtk'),
        Match(wm_class='speedcrunch'),
        Match(wm_class='zoom'),
        Match(wm_class='Godot_Engine'),
    ]
)
auto_fullscreen = False
focus_on_window_activation = "urgent"
reconfigure_screens = True

@hook.subscribe.startup_once
def startup_once():
    startup_file = os.path.expanduser('~/.config/qtile/startup_once')
    subprocess.call([startup_file])

auto_minimize = True

wl_input_rules = None

wmname = "LG3D"
